//Fragment shader for light-affected objects

#define NUMPOINT 1
#define NUMDIR 1
#define NUMSPOT 3

struct PointLight
{
	vec3 m_pos;
	vec3 m_diffuse;
	float m_specIntens;
	float m_radius;
	float m_quadratic;
};

struct DirLight
{
	vec3 m_diffuse;
	float m_specIntens;
	vec3 m_direction;
	vec3 m_ambient;
};

struct SpotLight
{		
	vec3 m_pos;
	vec3 m_diffuse;
	float m_specIntens;
	float m_angle;
	float m_fadeAngle;
	float m_radius;
	float m_quadratic;
	vec3 m_direction;
	int m_antiLight;
};


uniform PointLight in_pLight[NUMPOINT + 1];
uniform DirLight in_dLight[NUMDIR + 1]; // This refuses to be a 1-space array, hence
uniform SpotLight in_sLight[NUMSPOT];


uniform sampler2D in_Texture;
uniform vec3 in_Emissive;
varying vec2 ex_TexCoord;
varying vec3 ex_FragPos;
varying vec3 ex_Normal;

//uniform mat4 in_Mod;
uniform vec3 in_CamPos;
uniform int in_Shininess;

//Reference learn OpenGL
vec3 calcDifSpec(vec3 _norm, vec4 _tex, vec3 _difCol, float _specInt, float _attenuation, vec3 _lDir)
{
 //Diffuse Light  

  float directness = max(dot(_norm, _lDir), 0.0);  
  vec3 difLight = directness * vec3(_tex);
  vec3 dLight = _difCol * difLight;

  //Specular
  vec3 specLight = vec3(0.0, 0.0, 0.0);

  if (dot(_norm, _lDir) > 0) // Stop specular affecting facing away objects
  {
	vec3 camDir = normalize(in_CamPos - ex_FragPos);
	vec3 reflection = reflect(_lDir, _norm);
	float shine = pow(max(dot(camDir, reflection), 0.0), in_Shininess);
	
	specLight = (_specInt * shine * _difCol);
  }

  //if (_attenuation < 0.1) {return vec3(1.0, 0.0, 1.0);}
  return (dLight + specLight) * (_attenuation * 2); 
}


void main()
{
  vec4 tex = texture2D(in_Texture, ex_TexCoord);
  
  vec3 norm = normalize(ex_Normal);
  vec3 ambient = vec3(0.0, 0.0, 0.0);

  for (int i = 0; i < NUMDIR; i++) // For each ambient source
  {
	ambient += in_dLight[i].m_ambient;
  }
  vec3 light = ambient + in_Emissive;

  vec3 lDir;
  float attenuation = 1.0;
  for (int i = 0; i < NUMDIR; i++) // For each directional light
  {	 
	lDir = -in_dLight[i].m_direction;
	light += max(calcDifSpec(norm, tex, in_dLight[i].m_diffuse, in_dLight[i].m_specIntens, attenuation/2.0, lDir), 0.0);	 
  }

  for (int i = 0; i < NUMPOINT; i++) // For each point light
  {
	lDir = normalize(in_pLight[i].m_pos - ex_FragPos);
	float d = length(in_pLight[i].m_pos - ex_FragPos);
	
	float linear = 4.5 / in_pLight[i].m_radius;
	attenuation = 1.0 / (1.0 + linear * d + in_pLight[i].m_quadratic * (d * d));
	

	light += max(calcDifSpec(norm, tex, in_pLight[i].m_diffuse, in_pLight[i].m_specIntens, attenuation, lDir), 0.0); // Don't add negative light. That would be silly.
  }


   for (int i = 0; i < NUMSPOT; i++) // For each spotLight
   {
    lDir = normalize(in_sLight[i].m_pos - ex_FragPos);
	float theta = dot(lDir, normalize(-in_sLight[i].m_direction));   
	float epsilon = in_sLight[i].m_angle - in_sLight[i].m_fadeAngle;
	float intensity = clamp((theta - in_sLight[i].m_fadeAngle) / epsilon, 0.0, 1.0);	
	
	float d = length(in_sLight[i].m_pos - ex_FragPos);	
	float linear = 4.5 / in_sLight[i].m_radius;
	attenuation = 1.0 / (1.0 + linear * d + in_sLight[i].m_quadratic * (d * d));

	if (in_sLight[i].m_antiLight == 0) // If a normal light
	{
		light+= max(calcDifSpec(norm, tex, in_sLight[i].m_diffuse, in_sLight[i].m_specIntens, attenuation, lDir), 0.0) * intensity;		
	}
	else //If an anti light
	{
		light+= min(calcDifSpec(norm, tex, in_sLight[i].m_diffuse, in_sLight[i].m_specIntens, attenuation, lDir), 0.0) * intensity; // sLight[2] is a 'blotch' (anti-light)
	}

   }  
  gl_FragColor = tex * vec4(light, 1.0);
}

